This is pdfTeX, Version 3.141592653-2.6-1.40.22 (TeX Live 2022/dev/Debian) (preloaded format=latex 2023.3.11)  11 MAR 2023 18:23
entering extended mode
 restricted \write18 enabled.
 %&-line parsing enabled.
**\makeatletter\def\HCode{\futurelet\HCode\HChar}\def\HChar{\ifx"\HCode\def\HCo
de"##1"{\Link##1}\expandafter\HCode\else\expandafter\Link\fi}\def\Link#1.a.b.c.
{\AddToHook{class/before}{\RequirePackage[#1,html]{tex4ht}\RequirePackage{tex4e
book}\Configure{ext}{xhtml}}\let\HCode\documentstyle\def\documentstyle{\let\doc
umentstyle\HCode\expandafter\def\csname tex4ht\endcsname{#1,html}\def\HCode####
1{\documentstyle[tex4ht,}\@ifnextchar[{\HCode}{\documentstyle[tex4ht]}}}\makeat
other\HCode xhtml,mathml,charset=utf-8,charset=utf-8,epub3,html5,uni-html4.a.b.
c.\input "\detokenize{adversarial.tex}"
(./adversarial.tex (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/tex4ht.sty
version 2021-09-14-14:11
Package: tex4ht 
--------------------------------------
--- Note --- for _ at preamble, use the command line option `early_'
--------------------------------------
--------------------------------------
--- Note --- for ^ at preamble, use the command line option `early^'
--------------------------------------
\tmp:toks=\toks16
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/usepackage.4ht
version 2022-01-11-14:12
) (/usr/share/texlive/texmf-dist/tex/latex/tex4ebook/tex4ebook.sty
Package: tex4ebook 2016/03/31 version 0.1d
(/usr/share/texlive/texmf-dist/tex/latex/etoolbox/etoolbox.sty
Package: etoolbox 2020/10/05 v2.5k e-TeX tools for LaTeX (JAW)
\etb@tempcnta=\count185
) (/usr/share/texlive/texmf-dist/tex/latex/kvoptions/kvoptions.sty
Package: kvoptions 2020-10-07 v3.14 Key value format for package options (HO)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/keyval.sty
Package: keyval 2014/10/28 v1.15 key=value parser (DPC)
\KV@toks@=\toks17
) (/usr/share/texlive/texmf-dist/tex/generic/ltxcmds/ltxcmds.sty
Package: ltxcmds 2020-05-10 v1.25 LaTeX kernel commands for general use (HO)
) (/usr/share/texlive/texmf-dist/tex/generic/kvsetkeys/kvsetkeys.sty
Package: kvsetkeys 2019/12/15 v1.18 Key value parser (HO)
)) (/usr/share/texlive/texmf-dist/tex/latex/graphics/graphicx.sty
Package: graphicx 2021/09/16 v1.2d Enhanced LaTeX Graphics (DPC,SPQR)
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/graphics-hooks.4ht
version 2020-10-17-13:53
) (/usr/share/texlive/texmf-dist/tex/latex/graphics/graphics.sty
Package: graphics 2021/03/04 v1.4d Standard LaTeX Graphics (DPC,SPQR)
(/usr/share/texlive/texmf-dist/tex/latex/graphics/trig.sty
Package: trig 2021/08/11 v1.11 sin cos tan (DPC)
) (/usr/share/texlive/texmf-dist/tex/latex/graphics-cfg/graphics.cfg
File: graphics.cfg 2016/06/04 v1.11 sample graphics configuration
)
Package graphics Info: Driver file: dvips.def on input line 107.
(/usr/share/texlive/texmf-dist/tex/latex/graphics-def/dvips.def
File: dvips.def 2017/06/20 v3.1d Graphics/color driver for dvips
))
\Gin@req@height=\dimen138
\Gin@req@width=\dimen139
)) (/usr/share/texlive/texmf-dist/tex/latex/base/article.cls
Document Class: article 2021/10/04 v1.4n Standard LaTeX document class
(/usr/share/texlive/texmf-dist/tex/latex/base/size10.clo
File: size10.clo 2021/10/04 v1.4n Standard LaTeX file (size option)
)
\c@part=\count186
\c@section=\count187
\c@subsection=\count188
\c@subsubsection=\count189
\c@paragraph=\count190
\c@subparagraph=\count191
\c@figure=\count192
\c@table=\count193
\abovecaptionskip=\skip47
\belowcaptionskip=\skip48
\bibindent=\dimen140
) (/usr/share/texlive/texmf-dist/tex/latex/tools/bm.sty
Package: bm 2021/04/25 v1.2e Bold Symbol Support (DPC/FMi)
\symboldoperators=\mathgroup4
\symboldletters=\mathgroup5
\symboldsymbols=\mathgroup6
Package bm Info: No bold for \OMX/cmex/m/n, using \pmb.
LaTeX Font Info:    Redeclaring math alphabet \mathbf on input line 149.
) (./nips14submit_e.sty (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/esopi
c-hooks.4ht
version 2020-10-17-13:53
tex4ht warning: package eso-pic was prevented from loading
)
\nipsrulerbox=\box50
\nipsrulercount=\count194
\nipsruleroffset=\dimen141
\cv@lineheight=\dimen142
\cv@boxheight=\dimen143
\cv@tmpbox=\box51
\cv@refno=\count195
\cv@tot=\count196
\cv@tmpc@=\count197
\cv@tmpc=\count198
) (/usr/share/texlive/texmf-dist/tex/latex/psnfss/times.sty
Package: times 2020/03/25 PSNFSS-v9.3 (SPQR) 
) (/usr/share/texlive/texmf-dist/tex/latex/url/url.sty
\Urlmuskip=\muskip16
Package: url 2013/09/16  ver 3.4  Verb mode for urls, etc.
) (/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amssymb.sty
Package: amssymb 2013/01/14 v3.01 AMS font symbols
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/amsfonts.sty
Package: amsfonts 2013/01/14 v3.01 Basic AMSFonts support
\@emptytoks=\toks18
\symAMSa=\mathgroup7
\symAMSb=\mathgroup8
LaTeX Font Info:    Redeclaring math symbol \hbar on input line 98.
LaTeX Font Info:    Overwriting math alphabet `\mathfrak' in version `bold'
(Font)                  U/euf/m/n --> U/euf/b/n on input line 106.
)) (/usr/share/texlive/texmf-dist/tex/latex/amscls/amsthm.sty
Package: amsthm 2020/05/29 v2.20.6
\thm@style=\toks19
\thm@bodyfont=\toks20
\thm@headfont=\toks21
\thm@notefont=\toks22
\thm@headpunct=\toks23
\thm@preskip=\skip49
\thm@postskip=\skip50
\thm@headsep=\skip51
\dth@everypar=\toks24
) (/usr/share/texlive/texmf-dist/tex/latex/natbib/natbib.sty
Package: natbib 2010/09/13 8.31b (PWD, AO)
\bibhang=\skip52
\bibsep=\skip53
LaTeX Info: Redefining \cite on input line 694.
\c@NAT@ctr=\count199
) (/usr/share/texlive/texmf-dist/tex/latex/enumitem/enumitem.sty
Package: enumitem 2019/06/20 v3.9 Customized lists
\labelindent=\skip54
\enit@outerparindent=\dimen144
\enit@toks=\toks25
\enit@inbox=\box52
\enit@count@id=\count266
\enitdp@description=\count267
) (/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsmath.sty
Package: amsmath 2021/10/15 v2.17l AMS math features
\@mathmargin=\skip55
For additional information on amsmath, use the `?' option.
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amstext.sty
Package: amstext 2021/08/26 v2.01 AMS text
(/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsgen.sty
File: amsgen.sty 1999/11/30 v2.0 generic functions
\@emptytoks=\toks26
\ex@=\dimen145
)) (/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsbsy.sty
Package: amsbsy 1999/11/29 v1.2d Bold Symbols
LaTeX Info: Redefining \boldsymbol on input line 28.
\pmbraise@=\dimen146
) (/usr/share/texlive/texmf-dist/tex/latex/amsmath/amsopn.sty
Package: amsopn 2021/08/26 v2.02 operator names
)
\inf@bad=\count268
LaTeX Info: Redefining \frac on input line 234.
\uproot@=\count269
\leftroot@=\count270
LaTeX Info: Redefining \overline on input line 399.
\classnum@=\count271
\DOTSCASE@=\count272
LaTeX Info: Redefining \ldots on input line 496.
LaTeX Info: Redefining \dots on input line 499.
LaTeX Info: Redefining \cdots on input line 620.
\Mathstrutbox@=\box53
\strutbox@=\box54
\big@size=\dimen147
LaTeX Font Info:    Redeclaring font encoding OML on input line 743.
LaTeX Font Info:    Redeclaring font encoding OMS on input line 744.
\macc@depth=\count273
\c@MaxMatrixCols=\count274
\dotsspace@=\muskip17
\c@parentequation=\count275
\dspbrk@lvl=\count276
\tag@help=\toks27
\row@=\count277
\column@=\count278
\maxfields@=\count279
\andhelp@=\toks28
\eqnshift@=\dimen148
\alignsep@=\dimen149
\tagshift@=\dimen150
\tagwidth@=\dimen151
\totwidth@=\dimen152
\lineht@=\dimen153
\@envbody=\toks29
\multlinegap=\skip56
\multlinetaggap=\skip57
\mathdisplay@stack=\toks30
LaTeX Info: Redefining \[ on input line 2938.
LaTeX Info: Redefining \] on input line 2939.
) (/usr/share/texlive/texmf-dist/tex/latex/tools/array.sty
Package: array 2021/10/04 v2.5f Tabular extension package (FMi)
\col@sep=\dimen154
\ar@mcellbox=\box55
\extrarowheight=\dimen155
\NC@list=\toks31
\extratabsurround=\skip58
\backup@length=\skip59
\ar@cellbox=\box56
)
\c@proposition=\count280
\c@lemma=\count281
\c@corollary=\count282
\c@theorem=\count283
(/usr/share/texlive/texmf-dist/tex/latex/algorithms/algorithm.sty
Package: algorithm 2009/08/24 v0.1 Document Style `algorithm' - floating enviro
nment
(/usr/share/texlive/texmf-dist/tex/latex/float/float.sty
Package: float 2001/11/08 v1.3d Float enhancements (AL)
\c@float@type=\count284
\float@exts=\toks32
\float@box=\box57
\@float@everytoks=\toks33
\@floatcapt=\box58
) (/usr/share/texlive/texmf-dist/tex/latex/base/ifthen.sty
Package: ifthen 2020/11/24 v1.1c Standard LaTeX ifthen package (DPC)
)
\@float@every@algorithm=\toks34
\c@algorithm=\count285
) (/usr/share/texlive/texmf-dist/tex/latex/algorithms/algorithmic.sty
Package: algorithmic 2009/08/24 v0.1 Document Style `algorithmic'
\c@ALC@unique=\count286
\c@ALC@line=\count287
\c@ALC@rem=\count288
\c@ALC@depth=\count289
\ALC@tlm=\skip60
\algorithmicindent=\skip61
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/tex4ht.4ht
version 2021-06-20-15:33
--------------------------------------
--- Note --- for additional information, use the command line option `info'
--------------------------------------
::::::::::::::::::::::::::::::::::::::::::
 TeX4ht info is available in the log file 
::::::::::::::::::::::::::::::::::::::::::
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/tex4ht.sty
version 2021-09-14-14:11
l.855 --- TeX4ht warning --- nonprimitive \everypar ---
--- needs --- tex4ht adversarial ---
\tmp:cnt=\count290
\openout15 = `adversarial.tmp'.

(./adversarial.tmp)
\tmp:dim=\skip62
(./adversarial.xref)
\:refout=\write3
\openout3 = `adversarial.xref'.

(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
--------------------------------------
--- Note --- to remove the <?xml version=...?> processing instruction use the c
ommand line option `no-VERSION'
--------------------------------------
--------------------------------------
--- Note --- to remove the DOCTYPE declaration use the command line option `no-
DOCTYPE'
--------------------------------------
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)
--------------------------------------
--- Note --- for marking of the base font, use the command line option `fonts+'

--------------------------------------
--------------------------------------
--- Note --- for non active _, use the command line option `no_'
--------------------------------------
--------------------------------------
--- Note --- for _ of catcode 13, use the command line option `_13'
--------------------------------------
--------------------------------------
--- Note --- for non active ^, use the command line option `no^'
--------------------------------------
--------------------------------------
--- Note --- for ^ of catcode 13, use the command line option `^13'
--------------------------------------
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
--------------------------------------
--- Note --- to ignore CSS font decoration, use the `NoFonts' command line opti
on
--------------------------------------
--------------------------------------
--- Note --- for jpg bitmaps of pictures, use the `jpg' command line option. (C
haracter bitmaps are controled only by `g' records of tex4ht.env and `-g' switc
hes of tex4ht.c) 
--------------------------------------
--------------------------------------
--- Note --- for gif bitmaps of pictures, use the `gif' command line option. (C
haracter bitmaps are controled only by `g' records of tex4ht.env and `-g' switc
hes of tex4ht.c) 
--------------------------------------
--------------------------------------
--- Note --- for content and toc in 2 frames, use the command line option `fram
es'
--------------------------------------
--------------------------------------
--- Note --- for content, toc, and footnotes in 3 frames, use the command line 
option `frames-fn'
--------------------------------------
--------------------------------------
--- Note --- for file extension name xht, use the command line option `xht'
--------------------------------------
TeX4ht package options: xhtml,mathml,charset=utf-8,epub3,html5,uni-html4,html
--------------------------------------
--- Note --- To print a timestamp, use the command line option timestamp
--------------------------------------
--------------------------------------
--- Note --- to ignore CSS code, use the command line option `-css
--------------------------------------
--------------------------------------
--- Note --- for inline CSS code, use the command line option `css-in'
--------------------------------------
--------------------------------------
--- Note --- for pop ups on mouse over, use the command line option `mouseover'

--------------------------------------
--------------------------------------
--- Note --- for addressing images in a subdirectory, use the command line opti
on `imgdir:.../'
--------------------------------------
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
--------------------------------------
--- Note --- To print a timestamp, use the command line option timestamp
--------------------------------------
)
\:tokwrite=\toks35
\:tokpage=\toks36
--------------------------------------
--- Note --- for back links to toc, use the command line option `sections+'
--------------------------------------
--------------------------------------
--- Note --- for linear crosslinks of pages, use the command line option `next'

--------------------------------------
\openout15 = `adversarial.4ct'.

\:tocout=\write4
\openout4 = `adversarial.4tc'.

(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/latex.4ht
version 2022-02-01-14:27
LaTeX Info: Redefining \_ on input line 173.
LaTeX Info: Redefining \, on input line 792.
LaTeX Info: Redefining \; on input line 793.
LaTeX Info: Redefining \! on input line 794.
LaTeX Info: Redefining \: on input line 795.
LaTeX Info: Redefining \> on input line 796.
--------------------------------------
--- Note --- for links into captions, instead of float heads, use the command l
ine option `refcaption'
--------------------------------------
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
--------------------------------------
--- Note --- For mini tocs immediately aftter the header use the command line o
ption `minitoc<'
--------------------------------------
--------------------------------------
--- Note --- for enumerated list elements with valued data, use the command lin
e option `enumerate+'
--------------------------------------
--------------------------------------
--- Note --- for enumerated list elements li's with value attributes, use the c
ommand line option `enumerate-'
--------------------------------------
--------------------------------------
--- Note --- for CSS2 code, use the command line option `css2'
--------------------------------------
--------------------------------------
--- Note --- for pictorial tabular, use the command line option `pic-tabular'
--------------------------------------
--------------------------------------
--- Note --- for bitmap fbox'es, use the command line option `pic-fbox'
--------------------------------------
--------------------------------------
--- Note --- for bitmap framebox'es, use the command line option `pic-framebox'

--------------------------------------
--------------------------------------
--- Note --- for inline footnotes use command line option `fn-in'
--------------------------------------
--------------------------------------
--- Note --- for tracing of latex font commands, use the command line option `f
onts'
--------------------------------------
--------------------------------------
--- Note --- for width specifications of tabular p entries, use the `p-width' c
ommand line option or a configuration similar to \Configure{HColWidth}{\HCode{ 
style="width:\HColWidth"}}
--------------------------------------
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/fontmath.4ht
version 2018-11-06-15:55
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
\tmp:bx=\box59
LaTeX Font Info:    Trying to load font information for OT1+ptm on input line 1
405.
(/usr/share/texlive/texmf-dist/tex/latex/psnfss/ot1ptm.fd
File: ot1ptm.fd 2001/06/04 font definitions for OT1/ptm.
) [1

]
LaTeX Font Info:    Trying to load font information for U+msa on input line 141
1.
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsa.fd
File: umsa.fd 2013/01/14 v3.01 AMS symbols A
)
LaTeX Font Info:    Trying to load font information for U+msb on input line 141
1.
(/usr/share/texlive/texmf-dist/tex/latex/amsfonts/umsb.fd
File: umsb.fd 2013/01/14 v3.01 AMS symbols B
) [2] [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [13] [14] [15] [16] [17] [18] 
[19] [20] [21] [22] [23] [24] [25] [26] [27] [28] [29] [30] [31] [32] [33] [34]
[35] [36] [37] [38] [39] [40] [41] [42] [43] [44] [45] [46] [47] [48] [49] [50]
[51] [52] [53]) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/latex/tex4ebook/tex4ebook.4ht
\opf:htmlid=\count291
\navpoint=\count292
(/usr/share/texlive/texmf-dist/tex/latex/tex4ebook/tex4ebook-epub3.4ht
\footnotebox=\box60
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/graphicx.4ht
version 2022-01-12-13:53
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/graphics.4ht
version 2021-08-12-13:49
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
--------------------------------------
--- Note --- if included graphics are of degraded quality, try the command line
 options `graphics-num' or `graphics-'. The `num' should provide the density of
 pixels in the bitmaps (e.g., 110). 
--------------------------------------
--------------------------------------
--- Note --- for key dimensions try the option `Gin-dim'; for key dimensions wh
en bounding box is unavailable try `Gin-dim+'; neither is recommended
--------------------------------------
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/dvips.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/article.4ht
version 2021-05-16-09:21
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
--------------------------------------
--- Note --- for automatic sectioning pagination, use the command line option `
1', `2', `3', '4', '5', '6', or '7'
--------------------------------------
--------------------------------------
--- Note --- for files named derived from section titles, use the command line 
option `sec-filename'
--------------------------------------
--------------------------------------
--- Note --- for i-columns index, use the command line option `index=i' (e.g., 
index=2)
--------------------------------------
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/bm.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/url.4ht
version 2022-01-02-14:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
--------------------------------------
--- Note --- for URL encoding within href use the command line option `url-enc'

--------------------------------------
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amssymb.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
[54] [55] [56] [57] [58] [59] [60] [61] [62] [63] [64] [65] [66] [67] [68] [69]
[70] [71] [72] [73] [74] [75] [76] [77] [78] [79] [80] [81] [82] [83] [84] [85]
[86] [87] [88] [89] [90] [91] [92] [93] [94] [95] [96] [97] [98] [99] [100] [10
1] [102] [103] [104] [105] [106] [107] [108] [109] [110] [111] [112] [113] [114
] [115] [116] [117] [118] [119] [120] [121] [122] [123] [124] [125] [126] [127]
[128] [129] [130] [131] [132] [133] [134] [135] [136] [137] [138] [139] [140] [
141] [142] [143] [144] [145] [146] [147] [148] [149] [150] [151] [152] [153] [1
54] [155] [156] [157] [158] [159] [160] [161] [162] [163] [164] [165] [166] [16
7] [168] [169] [170] [171] [172] [173] [174] [175] [176] [177] [178] [179] [180
] [181] [182] [183] [184] [185] [186] [187] [188] [189] [190] [191] [192] [193]
[194] [195] [196] [197] [198] [199] [200] [201] [202] [203] [204] [205] [206] [
207] [208] [209] [210] [211] [212] [213] [214] [215] [216] [217] [218] [219] [2
20] [221] [222] [223] [224] [225] [226] [227] [228] [229] [230] [231] [232] [23
3] [234] [235] [236] [237] [238] [239] [240] [241] [242] [243] [244] [245] [246
] [247] [248] [249] [250] [251] [252] [253] [254] [255] [256] [257]) (/usr/shar
e/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amsfonts.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amsthm.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/natbib.4ht
version 2021-06-27-08:11
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/enumitem.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amsmath.4ht
version 2019-12-29-14:17
\tmp:muskip=\muskip18
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amstext.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amsbsy.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/amsopn.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/array.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/algorithm.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/float.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/ifthen.4ht
version 2022-01-02-14:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/algorithmic.4ht
version 2009-05-21-09:32
(/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html4.4ht
version 2022-02-03-14:35
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/unicode.4ht
version 2021-06-19-14:11
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/mathml.4ht
version 2021-11-30-15:01
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html-mml.4ht
version 2021-04-17-18:22
) (/usr/share/texlive/texmf-dist/tex/generic/tex4ht/html5.4ht
version 2022-01-23-07:51
)) (/usr/share/texlive/texmf-dist/tex/latex/l3backend/l3backend-dvips.def
File: l3backend-dvips.def 2022-01-12 L3 backend support: dvips
\l__pdf_internal_box=\box61
\g__pdf_backend_object_int=\count293
\l__pdf_backend_content_box=\box62
\l__pdf_backend_model_box=\box63
\g__pdf_backend_annotation_int=\count294
\g__pdf_backend_link_int=\count295
\g__pdf_backend_link_sf_int=\count296
) (./adversarial.aux)
\openout1 = `adversarial.aux'.

LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line 57.
LaTeX Font Info:    ... okay on input line 57.
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line 57.
LaTeX Font Info:    ... okay on input line 57.
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line 57.
LaTeX Font Info:    ... okay on input line 57.
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line 57.
LaTeX Font Info:    ... okay on input line 57.
LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line 57.
LaTeX Font Info:    ... okay on input line 57.
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line 57.
LaTeX Font Info:    ... okay on input line 57.
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line 57.
LaTeX Font Info:    ... okay on input line 57.

LaTeX Warning: First page is already shipped out, ignoring
               \AtBeginDvi on input line 57.

--- file adversarial.css ---
LaTeX Font Info:    Trying to load font information for TS1+ptm on input line 6
0.
(/usr/share/texlive/texmf-dist/tex/latex/psnfss/ts1ptm.fd
File: ts1ptm.fd 2001/06/04 font definitions for TS1/ptm.
)
--- file adversarialse1.xhtml ---
[1]
LaTeX Font Info:    Trying to load font information for OT1+pcr on input line 8
0.
(/usr/share/texlive/texmf-dist/tex/latex/psnfss/ot1pcr.fd
File: ot1pcr.fd 2001/06/04 font definitions for OT1/pcr.
) [2]
--- file adversarialse2.xhtml ---
[3

]
--- file adversarialse3.xhtml ---
l.256 --- TeX4ht warning --- \Link{x4-3002r3}? ---
[4

] [5] [6

]
l.291 --- TeX4ht warning --- File `"fig1.xbb"' not found ---
l.291 --- TeX4ht warning --- Cannot determine size of graphic in "fig1.xbb" (no
 BoundingBox) ---
l. 291 --- needs --- fig1-.png ---
l.293 --- TeX4ht warning --- File `"fig2.xbb"' not found ---
l.293 --- TeX4ht warning --- Cannot determine size of graphic in "fig2.xbb" (no
 BoundingBox) ---
l. 293 --- needs --- fig2-.png ---
l.295 --- TeX4ht warning --- File `"fig3.xbb"' not found ---
l.295 --- TeX4ht warning --- Cannot determine size of graphic in "fig3.xbb" (no
 BoundingBox) ---
l. 295 --- needs --- fig3-.png ---
l.299 --- TeX4ht warning --- File `"fig4.xbb"' not found ---
l.299 --- TeX4ht warning --- Cannot determine size of graphic in "fig4.xbb" (no
 BoundingBox) ---
l. 299 --- needs --- fig4-.png ---
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.337 }
       
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.337 }
       
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.337 }
       
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.337 }
       
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \endgroup inserted.
<inserted text> 
                \endgroup 
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.337 }
       
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.337 }
       
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
\n:frac : ...p \b:frac \@@over \c:frac #2\d:frac }
                                                  
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.337 }
       
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.337 }
       
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.337 }
       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.337 }
       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten \endgroup.
\@makecaption ...#1:\else \cptB: \fi }{\cptC: {#2}
                                                  \cptD: }
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\@makecaption ... \cptB: \fi }{\cptC: {#2}\cptD: }
                                                  
l.337 }
       
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[7

]

! LaTeX Error: \begin{document} ended by \end{figure}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.339 \end{figure}
                  
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing } inserted.
<inserted text> 
                }
l.339 \end{figure}
                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.339 \end{figure}
                  
Things are pretty mixed up, but I think the worst is over.

[8

] [9

]
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.353 ...om data generating distribution $p_\text{
                                                  data}(\bm{x})$.}
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.353 ...rating distribution $p_\text{data}(\bm{x}
                                                  )$.}
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten \endgroup.
l.353 ...ng distribution $p_\text{data}(\bm{x})$.}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

[10

] [11] [12

]
--- file adversarialse4.xhtml ---
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
<recently read> }
                 
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.386 good estimator of $p_\text{
                                 data}$, if given enough capacity and traini...
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Missing $ inserted.
<inserted text> 
                $
l.390 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
<recently read> }
                 
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.394 has a global optimum for $p_g = p_\text{
                                              data}$. We will then show in
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.


LaTeX Warning: Reference `sec:convergence-of-algorithm' on page 13 undefined on
 input line 395.

! Missing $ inserted.
<inserted text> 
                $
l.398 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten $.
<recently read> }
                 
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\:Ttle ...dify#1Title\endcsname \html:sectoc {#3}}
                                                  
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\b:subsection ...\HtmlParOn \IgnoreIndent \egroup 
                                                  \par \ShowPar 
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.399 ...Global Optimality of $p_g=p_\text{data}$}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \endgroup inserted.
<inserted text> 
                \endgroup 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Display math should end with $$.
<to be read again> 
                   \tex_par:D 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

[13

]
! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing $ inserted.
<inserted text> 
                $
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
\n:frac : ...p \b:frac \@@over \c:frac #2\d:frac }
                                                  
l.408 ...x})}{p_\text{data}(\bm{x}) + p_g(\bm{x})}
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! You can't use `\eqno' in math mode.
\endmathdisplay@a ...\df@tag \@empty \else \veqno 
                                                  \alt@tag \df@tag \fi \ifx ...
l.409 \end{equation}
                    
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.


! LaTeX Error: \begin{proposition} on input line 404 ended by \end{equation}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.409 \end{equation}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing $ inserted.
<inserted text> 
                $
l.409 \end{equation}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.


! LaTeX Error: \begin{document} ended by \end{proposition}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.410 \end{proposition}
                       
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing } inserted.
<inserted text> 
                }
l.410 \end{proposition}
                       
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.410 \end{proposition}
                       
Things are pretty mixed up, but I think the worst is over.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.418 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.418 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \cr inserted.
<inserted text> 
                \cr 
l.418 \end{align}
                 
I'm guessing that you meant to end an alignment here.

! Missing { inserted.
<inserted text> 
                {
l.418 \end{align}
                 
I've put in what seems to be necessary to fix
the current column of the current alignment.
Try to go on, since this might almost work.

! Extra }, or forgotten $.
\c:halign ->\egroup 
                    \d:halign 
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &
                     &
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &&
                      
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \omit.
\omit ->\:omit 
               \BB:halign \gdef \end:omit {\gdef \end:omit {}\d:halign }
l.418 \end{align}
                 
I expect to see \omit only after tab marks or the \cr of
an alignment. Proceed, and I'll ignore this case.

! Misplaced \cr.
\cr ->\rR:halign \1cr 
                      
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
or \cr or \span just now. If something like a right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \noalign.
\math@cr@@ ...ffalse }\fi \math@cr@@@ \o:noalign: 
                                                  {\vskip #1\relax }
l.418 \end{align}
                 
I expect to see \noalign only after the \cr of
an alignment. Proceed, and I'll ignore this case.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\math@cr@@ ...cr@@@ \o:noalign: {\vskip #1\relax }
                                                  
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Misplaced alignment tab character &.
<argument> ...onumber \\ \label {eq:cost-for-D} =&
                                                   \int _{\bm {x}} p_\text {...
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
<argument> ...hop \fi {\csname a:intop\endcsname }
                                                  
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
<recently read> }
                 
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Limit controls must follow a math operator.
\n:nolimits: ->\o:nolimits: 
                            \futurelet \:temp \:nolimits 
l.418 \end{align}
                 
I'm ignoring this misplaced \limits or \nolimits command.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.418 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.418 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &
                     &
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &&
                      
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \omit.
\omit ->\:omit 
               \BB:halign \gdef \end:omit {\gdef \end:omit {}\d:halign }
l.418 \end{align}
                 
I expect to see \omit only after tab marks or the \cr of
an alignment. Proceed, and I'll ignore this case.

! Misplaced \cr.
\cr ->\rR:halign \1cr 
                      
l.418 \end{align}
                 
I can't figure out why you would want to use a tab mark
or \cr or \span just now. If something like a right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \noalign.
\math@cr@@ ...ffalse }\fi \math@cr@@@ \o:noalign: 
                                                  {\vskip #1\relax }
l.418 \end{align}
                 
I expect to see \noalign only after the \cr of
an alignment. Proceed, and I'll ignore this case.

! Missing $ inserted.
<inserted text> 
                $
l.418 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.418 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\math@cr@@ ...cr@@@ \o:noalign: {\vskip #1\relax }
                                                  
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\EndMkHalign ->\egroup 
                       \d:PauseMkHalign \end:m \endgroup \iffalse {\fi \expa...
l.418 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.420 ...d to be defined outside of $Supp(p_\text{
                                                  data}) \cup Supp(p_g)$, co...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.420 ...ined outside of $Supp(p_\text{data}) \cup
                                                   Supp(p_g)$, concluding th...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

[14]
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
<recently read> }
                 
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.423 ...tes whether $\bm{x}$ comes from $p_\text{
                                                  data}$ (with $y=1$) or fro...
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Missing $ inserted.
<inserted text> 
                $
l.424 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.432 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.432 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \cr inserted.
<inserted text> 
                \cr 
l.432 \end{align}
                 
I'm guessing that you meant to end an alignment here.

! Missing { inserted.
<inserted text> 
                {
l.432 \end{align}
                 
I've put in what seems to be necessary to fix
the current column of the current alignment.
Try to go on, since this might almost work.

! Extra }, or forgotten $.
\c:halign ->\egroup 
                    \d:halign 
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten \endgroup.
\mo:p #1#2#3->{\csname a:#2\endcsname #1{#3}
                                            \csname b:#2\endcsname }
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &
                     &
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &&
                      
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \omit.
\omit ->\:omit 
               \BB:halign \gdef \end:omit {\gdef \end:omit {}\d:halign }
l.432 \end{align}
                 
I expect to see \omit only after tab marks or the \cr of
an alignment. Proceed, and I'll ignore this case.

! Misplaced \cr.
\cr ->\rR:halign \1cr 
                      
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
or \cr or \span just now. If something like a right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \noalign.
\math@cr@@ ...ffalse }\fi \math@cr@@@ \o:noalign: 
                                                  {\vskip #1\relax }
l.432 \end{align}
                 
I expect to see \noalign only after the \cr of
an alignment. Proceed, and I'll ignore this case.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\math@cr@@ ...cr@@@ \o:noalign: {\vskip #1\relax }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Misplaced alignment tab character &.
<argument> ...[\log (1 - D^*_G(G(\bm {z})))] \\ =&
                                                   \mathbb {E}_{\bm {x} \sim...
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.


! LaTeX Error: \mathbb allowed only in math mode.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.432 \end{align}
                 
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.432 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.432 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<argument> ...bb {E}_{\bm {x} \sim p_\text {data}}
                                                  [\log D^*_G(\bm {x})] + \m...
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &
                     &
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced alignment tab character &.
\@tempa ->\endgroup &&
                      
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \omit.
\omit ->\:omit 
               \BB:halign \gdef \end:omit {\gdef \end:omit {}\d:halign }
l.432 \end{align}
                 
I expect to see \omit only after tab marks or the \cr of
an alignment. Proceed, and I'll ignore this case.

! Misplaced \cr.
\cr ->\rR:halign \1cr 
                      
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
or \cr or \span just now. If something like a right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \noalign.
\math@cr@@ ...ffalse }\fi \math@cr@@@ \o:noalign: 
                                                  {\vskip #1\relax }
l.432 \end{align}
                 
I expect to see \noalign only after the \cr of
an alignment. Proceed, and I'll ignore this case.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\math@cr@@ ...cr@@@ \o:noalign: {\vskip #1\relax }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Misplaced alignment tab character &.
<argument> ...1 - D^*_G(\bm {x}))] \nonumber \\ =&
                                                   \mathbb {E}_{\bm {x} \sim...
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
here. If you just want an ampersand, the remedy is
simple: Just type `I\&' now. But if some right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.


! LaTeX Error: \mathbb allowed only in math mode.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.432 \end{align}
                 
You're in trouble here.  Try typing  <return>  to proceed.
If that doesn't work, type  X <return>  to quit.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.432 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.432 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<argument> ...bb {E}_{\bm {x} \sim p_\text {data}}
                                                  \left [\log \frac {p_\text...
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.432 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.432 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \endgroup inserted.
<inserted text> 
                \endgroup 
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.432 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.432 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten $.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\n:frac : ...p \b:frac \@@over \c:frac #2\d:frac }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.432 \end{align}
                 
I'm ignoring a \right that had no matching \left.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.432 \end{align}
                 
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.432 \end{align}
                 
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Display math should end with $$.
<to be read again> 
                   \tex_par:D 
l.432 \end{align}
                 
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
\n:frac : ...p \b:frac \@@over \c:frac #2\d:frac }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.432 \end{align}
                 
I'm ignoring a \right that had no matching \left.

! Misplaced \cr.
\math@cr@@@ ->\cr 
                  
l.432 \end{align}
                 
I can't figure out why you would want to use a tab mark
or \cr or \span just now. If something like a right brace
up above has ended a previous alignment prematurely,
you're probably due for more error messages, and you
might try typing `S' now just to see what is salvageable.

! Misplaced \noalign.
\math@cr@@ ...ffalse }\fi \math@cr@@@ \o:noalign: 
                                                  {\vskip #1\relax }
l.432 \end{align}
                 
I expect to see \noalign only after the \cr of
an alignment. Proceed, and I'll ignore this case.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\math@cr@@ ...cr@@@ \o:noalign: {\vskip #1\relax }
                                                  
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\EndMkHalign ->\egroup 
                       \d:PauseMkHalign \end:m \endgroup \iffalse {\fi \expa...
l.432 \end{align}
                 
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Undefined control sequence.
\EndMkHalign ->\egroup \d:PauseMkHalign \end:m 
                                               \endgroup \iffalse {\fi \expa...
l.432 \end{align}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> )M\halign:id 
                        x\mu:span 
l.432 \end{align}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
<argument> \new:span 
                     ;
l.432 \end{align}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\EndMkHalign ...end:omit \sv:end:omit \relax:shrp 
                                                  \iffalse }\fi 
l.432 \end{align}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\n:endalign: ...alignConfig \csname b:\align:type 
                                                  \endcsname \ifingather@ \r...
l.432 \end{align}
                 
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.


! LaTeX Error: \begin{document} ended by \end{align}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.432 \end{align}
                 
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing $ inserted.
<inserted text> 
                $
l.432 \end{align}
                 
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Display math should end with $$.
<to be read again> 
                   \endgroup 
l.432 \end{align}
                 
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

[15]
! Extra \endgroup.
<recently read> \endgroup 
                          
l.432 \end{align}
                 
Things are pretty mixed up, but I think the worst is over.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.436 ... is achieved if and only if $p_g=p_\text{
                                                  data}$.
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.437 ...t point, $C(G)$ achieves the value $-\log
                                                   4$.
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.441 For $p_g=p_\text{
                       data}$, $D^*_G(\bm{x})=\frac{1}{2}$, (consider Eq.~\r...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.441 For $p_g=p_\text{data}$, $D^*_G(\bm{x}
                                            )=\frac{1}{2}$, (consider Eq.~\r...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.441 ... $C(G)$, reached only for $p_g = p_\text{
                                                  data}$, observe that
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.


! LaTeX Error: Bad math environment delimiter.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.442 \[
        
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \endgroup inserted.
<inserted text> 
                \endgroup 
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p #1#2#3->{\csname a:#2\endcsname #1{#3}
                                            \csname b:#2\endcsname }
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.443 ...thbb{E}_{\bm{x} \sim p_\text{data}} \left
                                                  [ - \log 2 \right] + \math...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.443 ...hbb{E}_{\bm{x} \sim p_\text{data}} \left[
                                                   - \log 2 \right] + \mathb...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


! LaTeX Error: \begin{proof} on input line 440 ended by \end{equation*}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.444 \]
        
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing $ inserted.
<inserted text> 
                $
l.444 \]
        
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
\]->\ed:Math \egroup 
                     
l.444 \]
        
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

[16]
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Display math should end with $$.
<to be read again> 
                   \tex_par:D 
l.452 C(G) = -\log(4) + KL \left(p_\text{
                                         data} \left \| \frac{p_\text{data} ...
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

! Missing $ inserted.
<inserted text> 
                $
l.452 ...\log(4) + KL \left(p_\text{data} \left \|
                                                   \frac{p_\text{data} + p_g...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \endgroup inserted.
<inserted text> 
                \endgroup 
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
\n:frac : ...p \b:frac \@@over \c:frac #2\d:frac }
                                                  
l.452 ...a} \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right) + KL \lef...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.452 ... \| \frac{p_\text{data} + p_g}{2} \right.
                                                   \right) + KL \left(p_g \l...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.452 ... \| \frac{p_\text{data} + p_g}{2} \right.
                                                   \right) + KL \left(p_g \l...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.452 ... \| \frac{p_\text{data} + p_g}{2} \right.
                                                   \right) + KL \left(p_g \l...
I'm ignoring a \right that had no matching \left.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.452 ...c{p_\text{data} + p_g}{2} \right. \right)
                                                   + KL \left(p_g \left \| \...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.452 ...c{p_\text{data} + p_g}{2} \right. \right)
                                                   + KL \left(p_g \left \| \...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.452 ...c{p_\text{data} + p_g}{2} \right. \right)
                                                   + KL \left(p_g \left \| \...
I'm ignoring a \right that had no matching \left.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \endgroup inserted.
<inserted text> 
                \endgroup 
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
<recently read> }
                 
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Extra \endgroup.
\n:frac : #1#2->{\a:frac \begingroup #1\endgroup 
                                                 \b:frac \@@over \c:frac #2\...
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
Things are pretty mixed up, but I think the worst is over.

! Missing $ inserted.
<inserted text> 
                $
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
\n:frac : ...p \b:frac \@@over \c:frac #2\d:frac }
                                                  
l.452 ..._g \left \| \frac{p_\text{data} + p_g}{2}
                                                   \right. \right)
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.452 ... \| \frac{p_\text{data} + p_g}{2} \right.
                                                   \right)
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.452 ... \| \frac{p_\text{data} + p_g}{2} \right.
                                                   \right)
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.452 ... \| \frac{p_\text{data} + p_g}{2} \right.
                                                   \right)
I'm ignoring a \right that had no matching \left.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.452 ...c{p_\text{data} + p_g}{2} \right. \right)
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.452 ...c{p_\text{data} + p_g}{2} \right. \right)
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.452 ...c{p_\text{data} + p_g}{2} \right. \right)
                                                  
I'm ignoring a \right that had no matching \left.

! You can't use `\eqno' in math mode.
\endmathdisplay@a ...\df@tag \@empty \else \veqno 
                                                  \alt@tag \df@tag \fi \ifx ...
l.453 \end{equation}
                    
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.


! LaTeX Error: \begin{document} ended by \end{equation}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.453 \end{equation}
                    
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Missing $ inserted.
<inserted text> 
                $
l.453 \end{equation}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.453 \end{equation}
                    
Things are pretty mixed up, but I think the worst is over.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing \right. inserted.
<inserted text> 
                \right .
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Display math should end with $$.
<to be read again> 
                   \tex_par:D 
l.459 ... = - \log(4) + 2 \cdot JSD \left(p_\text{
                                                  data} \left \| p_g \right....
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

! Missing $ inserted.
<inserted text> 
                $
l.459 ... 2 \cdot JSD \left(p_\text{data} \left \|
                                                   p_g \right. \right)
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Extra }, or forgotten $.
\a:right #1->\egroup 
                     \egroup 
l.459 ..._\text{data} \left \| p_g \right. \right)
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten $.
\a:right #1->\egroup \egroup 
                             
l.459 ..._\text{data} \left \| p_g \right. \right)
                                                  
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra \right.
\n:right: #1->\a:right {#1}\o:right: .
                                      \b:right {#1}
l.459 ..._\text{data} \left \| p_g \right. \right)
                                                  
I'm ignoring a \right that had no matching \left.

! You can't use `\eqno' in math mode.
\endmathdisplay@a ...\df@tag \@empty \else \veqno 
                                                  \alt@tag \df@tag \fi \ifx ...
l.460 \end{equation}
                    
Sorry, but I'm not programmed to handle this case;
I'll just pretend that you didn't ask for it.
If you're in the wrong mode, you might be able to
return to the right one by typing `I}' or `I$' or `I\par'.

! Missing $ inserted.
<inserted text> 
                $
l.460 \end{equation}
                    
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
<recently read> }
                 
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.464 that the only solution is $p_g=p_\text{
                                             data}$, i.e., the generative mo...
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Missing $ inserted.
<inserted text> 
                $
l.465 \end{proof}
                 
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

[17]

! LaTeX Error: \begin{document} ended by \end{proof}.

See the LaTeX manual or LaTeX Companion for explanation.
Type  H <return>  for immediate help.
 ...                                              
                                                  
l.465 \end{proof}
                 
Your command was ignored.
Type  I <command> <return>  to replace it with another command,
or  <return>  to continue without it.

! Extra \endgroup.
<recently read> \endgroup 
                          
l.465 \end{proof}
                 
Things are pretty mixed up, but I think the worst is over.

l.465 --- TeX4ht warning --- \SaveEverypar's: 2 at \begin{proof} and 3 \end{pro
of} ---
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Display math should end with $$.
<to be read again> 
                   \tex_par:D 
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
The `$' that I just saw supposedly matches a previous `$$'.
So I shall assume that you typed `$$' both times.

! Extra }, or forgotten \endgroup.
\par ...m \@noitemerr {\@@par }\fi \else {\@@par }
                                                  \fi 
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
<recently read> }
                 
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p #1#2#3->{\csname a:#2\endcsname #1{#3}
                                            \csname b:#2\endcsname }
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Extra }, or forgotten \endgroup.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.473 ...$$\mathbb{E}_{\bm{x} \sim p_\text{data}}[
                                                  \log D^*_G(\bm{x})] + \mat...
I've deleted a group-closing symbol because it seems to be
spurious, as in `$x}$'. But perhaps the } is legitimate and
you forgot something else, as in `\hbox{$x}'. In such cases
the way to recover is to insert both the forgotten and the
deleted material, e.g., by typing `I$}'.

! Missing $ inserted.
<inserted text> 
                $
l.473 ...athbb{E}_{\bm{x} \sim p_\text{data}}[\log
                                                   D^*_G(\bm{x})] + \mathbb{...
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing $ inserted.
<inserted text> 
                $
l.474 \end{proposition}
                       
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.


LaTeX Warning: Reference `thm:global-optimality' on page 18 undefined on input 
line 477.

[18] [19]
--- file adversarialse5.xhtml ---

LaTeX Warning: Reference `table:parzen' on page 20 undefined on input line 516.


[20

] [21

]
! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.525 Model &
              MNIST & TFD \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.525 Model & MNIST &
                      TFD \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.526 \hline
            
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.527 DBN~\citep{Bengio-et-al-ICML2013} &
                                          $138 \pm 2$ & $1909 \pm 66$ \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.527 ...ep{Bengio-et-al-ICML2013} & $138 \pm 2$ &
                                                   $1909 \pm 66$ \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.528 S
       tacked CAE~\citep{Bengio-et-al-ICML2013} & $121 \pm 1.6$ & $\mathbf{2...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.528 Stacked CAE~\citep{Bengio-et-al-ICML2013} &
                                                  $121 \pm 1.6$ & $\mathbf{2...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.528 ...{Bengio-et-al-ICML2013} & $121 \pm 1.6$ &
                                                   $\mathbf{2110 \pm 50}$ \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.529 D
       eep GSN~\citep{Bengio-et-al-ICML-2014} & $214 \pm 1.1$ & $1890 \pm 29...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.529 Deep GSN~\citep{Bengio-et-al-ICML-2014} &
                                                $214 \pm 1.1$ & $1890 \pm 29...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.529 ...Bengio-et-al-ICML-2014} & $214 \pm 1.1$ &
                                                   $1890 \pm 29$ \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.530 A
       dversarial nets & $\mathbf{225 \pm 2}$ & $\mathbf{2057 \pm 26}$
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.530 Adversarial nets &
                         $\mathbf{225 \pm 2}$ & $\mathbf{2057 \pm 26}$
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.530 Adversarial nets & $\mathbf{225 \pm 2}$ &
                                                $\mathbf{2057 \pm 26}$
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.531 \end{tabular}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

[22

]

LaTeX Warning: Reference `fig:visuals1' on page 23 undefined on input line 542.



LaTeX Warning: Reference `fig:visuals3' on page 23 undefined on input line 542.


[23

] [24

]
l.552 --- TeX4ht warning --- File `"mnist_samples.xbb"' not found ---
l.552 --- TeX4ht warning --- Cannot determine size of graphic in "mnist_samples
.xbb" (no BoundingBox) ---
l. 552 --- needs --- mnist_samples.png ---
! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.552 ...raphics[width=2.6in]{mnist_samples.png} &
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

l.553 --- TeX4ht warning --- File `"tfd_samples.xbb"' not found ---
l.553 --- TeX4ht warning --- Cannot determine size of graphic in "tfd_samples.x
bb" (no BoundingBox) ---
l. 553 --- needs --- tfd_samples.png ---
! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.554 a
       ) & b) \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.554 a) &
           b) \\
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.555  \includegraphics
                       [width=2.6in]{cifar_full_samples.png} &
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

l.555 --- TeX4ht warning --- File `"cifar_full_samples.xbb"' not found ---
l.555 --- TeX4ht warning --- Cannot determine size of graphic in "cifar_full_sa
mples.xbb" (no BoundingBox) ---
l. 555 --- needs --- cifar_full_samples.png ---
! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.555 ...cs[width=2.6in]{cifar_full_samples.png} &
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

l.556 --- TeX4ht warning --- File `"cifar_conv_samples.xbb"' not found ---
l.556 --- TeX4ht warning --- Cannot determine size of graphic in "cifar_conv_sa
mples.xbb" (no BoundingBox) ---
l. 556 --- needs --- cifar_conv_samples.png ---
! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.557  c
        ) & d)
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.557  c) &
            d)
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.558 \end{tabular}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

[25

] [26

] [27

]
l.590 --- TeX4ht warning --- File `"1dsubspace.xbb"' not found ---
l.590 --- TeX4ht warning --- Cannot determine size of graphic in "1dsubspace.xb
b" (no BoundingBox) ---
l. 590 --- needs --- 1dsubspace.png ---
l.591 --- TeX4ht warning --- File `"1dsubspace2.xbb"' not found ---
l.591 --- TeX4ht warning --- Cannot determine size of graphic in "1dsubspace2.x
bb" (no BoundingBox) ---
l. 591 --- needs --- 1dsubspace2.png ---
[28

] [29

] [30

]
! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.620 &
        Deep directed graphical models & Deep undirected graphical models & ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.620 & Deep directed graphical models &
                                         Deep undirected graphical models & ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.620 ...dels & Deep undirected graphical models &
                                                   Generative autoencoders &...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.620 ...phical models & Generative autoencoders &
                                                   Adversarial models \tabul...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.621 \hline
            
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.622 Training &
                 Inference needed during training.
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.623          &
                 Inference needed during training. MCMC needed to approximat...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.624          &
                 Enforced tradeoff between mixing and power of reconstructio...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.625          &
                 Synchronizing the discriminator with the generator. Helveti...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.626 \hline
            
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.627 Inference &
                   Learned approximate inference &  Variational inference & ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.627 Inference &  Learned approximate inference &
                                                    Variational inference & ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.627 ...mate inference &  Variational inference &
                                                    MCMC-based inference &  ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.627 ...ional inference &  MCMC-based inference &
                                                    Learned approximate infe...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.628 \hline
            
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.629 Sampling &
                 No difficulties &  Requires Markov chain & Requires Markov ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.629 Sampling & No difficulties &
                                    Requires Markov chain & Requires Markov ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.629 ...o difficulties &  Requires Markov chain &
                                                   Requires Markov chain & N...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.629 ...es Markov chain & Requires Markov chain &
                                                   No difficulties \tabularn...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.630 \hline
            
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.631 Evaluating $p(x)$ &
                          {  Intractable, may be approximated with AIS} &  I...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.631 ...ractable, may be approximated with AIS} &
                                                    Intractable, may be appr...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.631 ...ractable, may be approximated with AIS  &
                                                  
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.632 ...oximated with Parzen density estimation &
                                                    Not explicitly represent...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.633 \hline
            
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.634 Model design &
                      Nearly all models incur extreme difficulty &  Careful ...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.634 ...rly all models incur extreme difficulty &
                                                    Careful design needed to...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.635  &
          Any differentiable function is theoretically permitted &  Any diff...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.635 ...ble function is theoretically permitted &
                                                    Any differentiable funct...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
\c:halign ->\egroup \d:halign 
                              
l.636 \end{tabular}
                   
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

[31

] [32

]
--- file adversarialse6.xhtml ---
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.650 to model $p_\text{
                        data}$),
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.650 to model $p_\text{
                        data}$),
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.650 to model $p_\text{
                        data}$),
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.650 to model $p_\text{
                        data}$),
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.650 to model $p_\text{
                        data}$),
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
<recently read> }
                 
l.650 to model $p_\text{
                        data}$),
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.650 to model $p_\text{
                        data}$),
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.


LaTeX Warning: Reference `table:comparison' on page 33 undefined on input line 
656.

! Missing $ inserted.
<inserted text> 
                $
l.658 
      
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

[33

]
--- file adversarialse7.xhtml ---
[34

] (./adversarial.bbl [35]
--- file adversarialli1.xhtml ---
[36

] [37]) (./adversarial.4ct
! Argument of \n:text@: has an extra }.
<inserted text> 
                \par 
l.8 ...l Optimality of $p_g=p_\text  {data}$}}{13}
                                                  \relax
I've run across a `}' that doesn't seem to match anything.
For example, `\def\a#1{...}' and `\a}' would produce
this error. If you simply proceed now, the `\par' that
I've just inserted will cause me to report a runaway
argument that might be the root of the problem. But if
your `}' was spurious, just type `2' and it will go away.

Runaway argument?
! Paragraph ended before \n:text@: was complete.
<to be read again> 
                   \par 
l.8 ...l Optimality of $p_g=p_\text  {data}$}}{13}
                                                  \relax
I suspect you've forgotten a `}', causing me to apply this
control sequence to too much text. How can we recover?
My plan is to forget the whole thing and hope for the best.

! Missing $ inserted.
<inserted text> 
                $
l.8 ...l Optimality of $p_g=p_\text  {data}$}}{13}
                                                  \relax
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Missing } inserted.
<inserted text> 
                }
l.8 ...l Optimality of $p_g=p_\text  {data}$}}{13}
                                                  \relax
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Missing } inserted.
<inserted text> 
                }
l.8 ...l Optimality of $p_g=p_\text  {data}$}}{13}
                                                  \relax
I've inserted something that you may have forgotten.
(See the <inserted text> above.)
With luck, this will get me unwedged. But if you
really didn't forget anything, try typing `2' now; then
my insertion and my current dilemma will both disappear.

! Too many }'s.
\mo:p ...\endcsname #1{#3}\csname b:#2\endcsname }
                                                  
l.8 ...l Optimality of $p_g=p_\text  {data}$}}{13}
                                                  \relax
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

! Undefined control sequence.
l.9 \doTocEntry
               \tocsubsection{4.2}{\csname a:TocLink\endcsname{5}{x5-60004.2...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.10 \doTocEntry
                \tocsection{5}{\csname a:TocLink\endcsname{6}{x6-70005}{QQ2-...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.11 \doTocEntry
                \toclot{1}{\csname a:TocLink\endcsname{6}{x6-7001r1}{}{\igno...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Missing $ inserted.
<inserted text> 
                $
l.11 ... than binary) version of dataset.}}{table}
                                                  \relax
I've inserted a begin-math/end-math symbol since I think
you left one out. Proceed, with fingers crossed.

! Undefined control sequence.
l.12 \doTocEntry
                \toclof{2}{\csname a:TocLink\endcsname{6}{x6-7002r2}{}{\igno...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.13 \doTocEntry
                \toclof{3}{\csname a:TocLink\endcsname{6}{x6-7003r3}{}{\igno...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.14 \doTocEntry
                \toclot{2}{\csname a:TocLink\endcsname{6}{x6-7004r2}{}{\igno...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.15 \doTocEntry
                \tocsection{6}{\csname a:TocLink\endcsname{7}{x7-80006}{QQ2-...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.16 \doTocEntry
                \tocsection{7}{\csname a:TocLink\endcsname{8}{x8-90007}{QQ2-...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.17 \doTocEntry
                \toclikesubsubsection{}{\csname a:TocLink\endcsname{8}{x8-10...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

! Undefined control sequence.
l.18 \doTocEntry
                \toclikesection{}{\csname a:TocLink\endcsname{9}{x9-110007}{...
The control sequence at the end of the top line
of your error message was never \def'ed. If you have
misspelled it (e.g., `\hobx'), type `I' and the correct
spelling (e.g., `I\hbox'). Otherwise just continue,
and I'll forget about whatever was undefined.

[38])
! Too many }'s.
\:TableOfContents ...\b:tableofcontents \fi \par }
                                                  \RecallEverypar \ifx \c:ta...
l.748 \end{document}
                    
You've closed more groups than you opened.
Such booboos are generally harmless, so keep going.

[39] [40

] (./adversarial.aux)

LaTeX Warning: There were undefined references.

 ) 
Here is how much of TeX's memory you used:
 10325 strings out of 478288
 148713 string characters out of 5849315
 572438 words of memory out of 5000000
 28076 multiletter control sequences out of 15000+600000
 485626 words of font info for 78 fonts, out of 8000000 for 9000
 1141 hyphenation exceptions out of 8191
 89i,16n,113p,2187b,888s stack positions out of 5000i,500n,10000p,200000b,80000s

Output written on adversarial.dvi (297 pages, 278140 bytes).
